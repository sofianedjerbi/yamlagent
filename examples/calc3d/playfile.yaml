version: 1

# Import shared configuration from .play/ directory
imports:
  - .play/tools.yaml
  - .play/agents.yaml

# Core TDD workflows - test, code, review cycle built-in
#
# Validation commands are enabled for automatic testing with pytest
#
tasks:
  # Feature Workflow: Architect -> TDD with validation
  - id: feature
    description: "Full feature: Technical spec -> Tests -> Implement -> Refactor -> Review"
    working_dir: "."
    files:
      read:
        - "**/*"
    steps:
      # Step 1: Create technical specification
      - name: "Create technical specification"
        agent:
          use: architect
          with:
            prompt: "Create technical specification for: {{ inputs.prompt }}"

      # Step 2: Write tests first based on spec (RED phase)
      - name: "Write tests (RED phase)"
        agent:
          use: tester
          with:
            prompt: "Create tests for the specified feature. Cover API contracts, data models, and core behavior."

      # Step 3: Implement to make tests pass (GREEN phase) with validation
      - name: "Implement feature (GREEN phase)"
        agent:
          use: coder
          with:
            prompt: "Implement the feature following the technical specification. Make the tests pass."
        validate:
          post_command: "uv run pytest"
          max_retries: 3
          continue_on_failure: false

      # Step 4: Refactor with best practices (REFACTOR phase)
      - name: "Refactor (REFACTOR phase)"
        agent:
          use: coder
          with:
            prompt: "Refactor the implementation following SOLID, DRY principles. Keep functionality intact."
        validate:
          post_command: "uv run pytest"
          max_retries: 2
          continue_on_failure: false

      # Step 5: Review the complete implementation
      - name: "Review implementation"
        agent:
          use: reviewer
          with:
            prompt: "Review the feature implementation. Check architecture, code quality, and whether tests cover key scenarios."

  # Quick: Implement -> Test -> Review with validation
  - id: code
    description: "Implement feature -> Create tests -> Review (with automatic validation)"
    working_dir: "."
    files:
      read:
        - "**/*"
    steps:
      # Step 1: Implement the feature with best practices
      - name: "Implement feature"
        agent:
          use: coder
          with:
            prompt: "Implement following best practices: {{ inputs.prompt }}"

      # Step 2: Create tests with validation
      - name: "Create tests"
        agent:
          use: tester
          with:
            prompt: "Create simple, efficient tests covering the implementation. Test happy path, edge cases, and errors."
        validate:
          post_command: "uv run pytest"
          max_retries: 2
          continue_on_failure: false

      # Step 3: Review implementation and tests
      - name: "Review code"
        agent:
          use: reviewer
          with:
            prompt: "Review the implementation and tests for quality and best practices."

  # Bug Fix Workflow: Root cause -> Fix -> Validate -> Review
  - id: bugfix
    description: "Find root cause -> Fix with best practices -> Validate -> Review"
    working_dir: "."
    files:
      read:
        - "**/*"
    steps:
      # Step 1: Find root cause (100% sure before fixing) - dedicated debugger
      - name: "Find root cause"
        agent:
          use: debugger
          with:
            prompt: "Investigate and find the ROOT CAUSE of: {{ inputs.prompt }}"

      # Step 2: Fix the root cause with best practices and validation
      - name: "Fix bug"
        agent:
          use: coder
          with:
            prompt: "Fix the root cause following best practices. Ensure the fix is minimal, targeted, and doesn't introduce new issues."
        validate:
          post_command: "uv run pytest"
          max_retries: 2
          continue_on_failure: false

      # Step 3: Review the bugfix
      - name: "Review bugfix"
        agent:
          use: reviewer
          with:
            prompt: "Review the bugfix: Does it address the root cause? Does it follow best practices? Any potential side effects?"